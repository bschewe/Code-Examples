from languageModel import *class TrigramModel(LanguageModel):    def __init__(self):        """		This is the constructor, don't worry about it. It's done.		This allows the TrigramModel to access LanguageModel functions        """        super(TrigramModel, self).__init__()    def __str__(self):        """		If you try to print a TrigramModel object		this is the string that prints        """        return "This is a trigram language model"    def trainText(self, text):        """		Requires: text is all the text to train on,			  a list of full-sentence strings		Modifies: self.wordCounts, a 3D dictionary			  This model is one level more complicated than			  the BigramModel. This model counts 3-word phrases			  instead of 2-word phrases like the BigramModel did.			  See Section 2.3.4 of the spec for an example.		Effects: Nothing        """        pText = self.prepText(text)        for p in pText:            p = p.split()            for i in range(len(p)-2):                if p[i] in self.wordCounts:                    if p[i+1] in self.wordCounts[p[i]].keys():                        if p[i+2] in self.wordCounts[p[i]][p[i+1]].keys():                            self.wordCounts[p[i]][p[i+1]][p[i+2]] = self.wordCounts[p[i]][p[i+1]][p[i+2]] + 1                        else:                            self.wordCounts[p[i]][p[i+1]][p[i+2]] = 1                    if p[i+1] not in self.wordCounts[p[i]].keys():                        self.wordCounts[p[i]][p[i+1]] = {p[i+2]: 1}                if p[i] not in self.wordCounts:                    self.wordCounts[p[i]] = {p[i+1] : {p[i+2] : 1}}    def nextToken(self, sentence):        """		Requires: sentence is the sentence so far        hasKey(self, sentence) == True        Modifies: nothing        Effects: returns the next word to be added to the sentence        This function is very similar to the function you wrote        for BigramModel.        An example of this mechanism is available is Appendix B.2        of the spec, along with pictures.        """        cumuList = []        count = 0        secondToLastWord = sentence.split()[-2]        lastWord = sentence.split()[-1]        for x in self.wordCounts[secondToLastWord][lastWord]:            count += 1            for s in range(0, self.wordCounts[secondToLastWord][lastWord][x]):                cumuList.append(x)        x = cumuList[random.randrange(0, count)]        return x    def hasKey(self, sentence):	"""	Requires: sentence is the sentence so far	Modifies: nothing	Effects: Returns True iff this language model can be used		for this sentence. For a trigram model, this is True		as long as the model as seen the last two words		together before.	"""        l = sentence.split()        if ((l[-2] in self.wordCounts.keys()) and (l[-1] in self.wordCounts[l[-2]].keys())):      		return True       	else:            	return False                